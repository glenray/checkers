Solving The Royal Tour with MinMaxA

White to move. White can force a win.
The moves result in the FEN positions.
Starting position: '[FEN "W:W27,19,18,11,7,6,5:B28,26,25,20,17,10,9,4,3,2"]'

1. 19-15-->	[FEN "B:W27,18,15,11,5,6,7:B25,26,28,17,20,9,10,2,3,4"]
   10x19-->	[FEN "W:W27,18,11,5,6,7:B25,26,28,17,19,20,9,2,3,4"]
2. 5-1-->	[FEN "B:W27,18,11,6,7,K1:B25,26,28,17,19,20,9,2,3,4"]
   3x10-->	[FEN "W:W27,18,11,6,K1:B25,26,28,17,19,20,9,10,2,4"] 
3. 11-8-->	[FEN "B:W27,18,6,8,K1:B25,26,28,17,19,20,9,10,2,4"]
   4x11-->	[FEN "W:W27,18,6,K1:B25,26,28,17,19,20,9,10,11,2"]
4. 27-24-->	[FEN "B:W24,18,6,K1:B25,26,28,17,19,20,9,10,11,2"]
   20x27-->	[FEN "W:W18,6,K1:B25,26,27,28,17,19,9,10,11,2"]
5. 18-14-->	[FEN "B:W14,6,K1:B25,26,27,28,17,19,9,10,11,2"]
   9x18-->	[FEN "W:W6,K1:B25,26,27,28,17,18,19,10,11,2"]
6. 1-5-->	[FEN "B:WK5,6:B25,26,27,28,17,18,19,10,11,2"]
   2x9-->	[FEN "W:WK5:B25,26,27,28,17,18,19,9,10,11"]
7. 5x32-->	[FEN "B:WK32:B28"]
White wins

MinMaxA@d7 Testing:
	From start, correctly gets 1 and 2, but moves 9-18 on 3 instead of 11-8.
	Starting from position 5.5, it sees the win with 100 score
	Starting from 4.5, it sees the win with 100 score
	Starting from 3.5, it picks the right move, but with a score of only 1.
		MinMaxA@d8, gets the win with 100 score, but it takes a long time.

Conclusions:
MinMaxA is not fast enough to solve the Royal Tour problem. Starting at position 3.5, MinMaxA@d8 finds the win. 3.5 is at level 0 and is 7 levels from the terminal node. (Level 8 evaluates the position and does not extend the tree.) So, MinMaxA would need a maxdepth of about 14 to solve the problem from the starting position. MinMaxA is way to slow for that.

Possible solutions:
1) implement pruning to extend the search tree
2) implement a more efficient method of iterating the move tree. Possibly bitboards?
3) use threading to work on more than one branch at a time.
4) cache the tree for use on the next move